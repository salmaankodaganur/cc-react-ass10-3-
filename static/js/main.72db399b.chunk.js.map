{"version":3,"sources":["mycomponent/Search.js","App.js","Hooks/usePrevious.js","reportWebVitals.js","index.js"],"names":["Search","searchTerm","onSearch","htmlFor","value","type","id","onChange","App","useState","setSearchTerm","prevSearch","ref","useRef","useEffect","current","usePrevious","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2KAEe,SAASA,EAAT,GAAwC,IAAvBC,EAAsB,EAAtBA,WAAWC,EAAW,EAAXA,SACvC,OACI,gCACG,uBAAOC,QAAQ,SAAf,4BACA,uBAAQC,MAAOH,EAAYI,KAAK,OAAOC,GAAG,SAASC,SAAUL,OCFzD,SAASM,IAEtB,MAAkCC,mBAAS,IAA3C,mBAAMR,EAAN,KAAiBS,EAAjB,KACMC,ECJmB,SAACP,GACzB,IAAMQ,EAAMC,mBAIZ,OAHAC,qBAAU,WACNF,EAAIG,QAAUX,KAEXQ,EAAIG,QDDOC,CAAYf,GAI/B,OACE,gCACE,cAACD,EAAD,CAASC,WAAYA,EAAYC,SALd,SAACe,GACxBP,EAAcO,EAAEC,OAAOd,UAKnB,kDAAqBH,KACrB,sCAASA,KACT,yCAAYU,QEhBlB,IAYeQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACtB,EAAD,MAEFuB,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.72db399b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Search({searchTerm,onSearch}) {\r\n    return (\r\n        <div>\r\n           <label htmlFor=\"search\">Searcging for:</label> \r\n           <input  value={searchTerm} type=\"text\" id=\"search\" onChange={onSearch}/>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\nimport Search from './mycomponent/Search'\nimport { usePrevious } from './Hooks/usePrevious'\n\nexport default function App() {\n  \n  const[searchTerm,setSearchTerm] = useState(\"\");\n  const prevSearch = usePrevious(searchTerm);\n  const onHandleChange = (e) =>{\n  setSearchTerm(e.target.value)\n }\n  return (\n    <div>\n      <Search  searchTerm={searchTerm} onSearch={onHandleChange}/>\n      <p>Your search term:{searchTerm}</p>\n      <h1>NOW:{searchTerm}</h1>\n      <h1>BEFORE:{prevSearch}</h1>\n    </div>\n  )\n}\n","import { useEffect, useRef } from 'react'\r\n\r\n\r\nexport const usePrevious = (value) => {\r\n   const ref = useRef();\r\n   useEffect(() =>{\r\n       ref.current = value;\r\n   });\r\n   return ref.current;\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}